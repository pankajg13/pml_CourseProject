setwd("C:/Users/Pankaj/pml_CourseProject/")
library(caret)
library(rattle)
library(randomForest)
training  <-  read.csv("pml-training.csv", header = T, strip.white = T, stringsAsFactors = F)
testing   <-  read.csv("pml-testing.csv",  header = T, strip.white = T, stringsAsFactors = F)
train     <-  training
charVar   <-  which(sapply(train,is.character))
train[charVar[4:36]]  <-  lapply(train[charVar[4:36]],as.numeric)
noNA      <-  which(sapply(train,function(x) sum(is.na(x)))==0)
noNA      <-  noNA[-(1:7)]
train_noNA<-  subset(train,,noNA)
exercise  <-  c("_belt","_arm","_dumbbell","_forearm")
pc_belt   <-  preProcess(train_noNA[which(grepl(exercise[1], names(train_noNA)))], method = "pca")
pc_belt_new         <-  predict(pc_belt, train_noNA[which(grepl(exercise[1], names(train_noNA)))])
names(pc_belt_new)  <-  tolower(paste(names(pc_belt_new),exercise[1], sep = ""))
# create PC's for arm sensor
pc_arm    <-  preProcess(train_noNA[which(grepl(exercise[2], names(train_noNA)))], method = "pca")
pc_arm_new          <-  predict(pc_arm, train_noNA[which(grepl(exercise[2], names(train_noNA)))])
names(pc_arm_new)   <-  tolower(paste(names(pc_arm_new), exercise[2], sep = ""))
# create PC's for dumbbell sensor
pc_dumbbell <-  preProcess(train_noNA[which(grepl(exercise[3], names(train_noNA)))],method = "pca")
pc_dumbbell_new       <-  predict(pc_dumbbell, train_noNA[which(grepl(exercise[3], names(train_noNA)))])
names(pc_dumbbell_new)<-  tolower(paste(names(pc_dumbbell_new), exercise[3], sep = ""))
# create PC's for forearm sensor
pc_forearm  <-  preProcess(train_noNA[which(grepl(exercise[4], names(train_noNA)))], method = "pca")
pc_forearm_new        <-  predict(pc_forearm, train_noNA[which(grepl(exercise[4], names(train_noNA)))])
names(pc_forearm_new) <-  tolower(paste(names(pc_forearm_new), exercise[4], sep = ""))
ggplot(pc_belt_new, aes(x = pc1_belt, y = pc2_belt, color = train_noNA$classe)) + geom_point()
ggplot(pc_arm_new, aes(x = pc1_arm, y = pc2_arm, color = train_noNA$classe)) + geom_point()
ggplot(pc_dumbbell_new , aes(x = pc1_dumbbell, y = pc2_dumbbell, color = train_noNA$classe)) + geom_point() + coord_cartesian(ylim=c(0,10))
ggplot(pc_forearm_new, aes(x = pc1_forearm, y = pc2_forearm, color = train_noNA$classe)) + geom_point() + coord_cartesian(ylim=c(-5,5))
training_pc   <-  data.frame(cbind(pc_belt_new, pc_arm_new, pc_dumbbell_new, pc_forearm_new), classe = train_noNA$classe)
test          <-  testing
# for belt sensor
test_pc_belt  <-  predict(pc_belt, newdata = test[row.names(pc_belt$rotation)])
names(test_pc_belt)   <-  tolower(paste(names(test_pc_belt), "_belt", sep = ""))
# for arm sensor
test_pc_arm   <-  predict(pc_arm, newdata = test[row.names(pc_arm$rotation)])
names(test_pc_arm)    <-  tolower(paste(names(test_pc_arm), "_arm", sep = ""))
# for dumbbell sensor
test_pc_dumbbell  <- predict(pc_dumbbell, newdata = test[row.names(pc_dumbbell$rotation)])
names(test_pc_dumbbell)<- tolower(paste(names(test_pc_dumbbell), "_dumbbell", sep = ""))
# for forearm sensor
test_pc_forearm   <- predict(pc_forearm, newdata = test[row.names(pc_forearm$rotation)])
names(test_pc_forearm)<-  tolower(paste(names(test_pc_forearm), "_forearm", sep = ""))
# Combining all the PCs into one testing PC Analysis set
testing_pc        <-  data.frame(cbind(test_pc_belt, test_pc_arm, test_pc_dumbbell, test_pc_forearm))
# MOdel 1: (rpart method)
model1  <-  train(classe ~ ., data = training_pc, method = "rpart")
# print the final model
model1$finalModel
# fancy rpart plotiing of the final model
fancyRpartPlot(model1$finalModel)
# Confusion Matrix
confusionMatrix(predict(model1,training_pc),training_pc$classe)
# Model2: Random Forest Method
model2      <-  randomForest(classe ~ ., data = training_pc)
#predict and generate the cases for evaluation
testing_predict   <-  predict(model2, testing_pc)
# change the working directory
setwd("/Users/Pankaj/pml_CourseProject/predictions/")
source("/Users/Pankaj/pml_CourseProject/pml_write_files.R")
pml_write_files(testing_predict)
set.seed(78786)
# MOdel 1: (rpart method)
model1  <-  train(classe ~ ., data = training_pc, method = "rpart")
# print the final model
model1$finalModel
# fancy rpart plotiing of the final model
fancyRpartPlot(model1$finalModel)
# Confusion Matrix
confusionMatrix(predict(model1,training_pc),training_pc$classe)
set.seed(46776)
# Model2: Random Forest Method
model2      <-  randomForest(classe ~ ., data = training_pc)
# Confusion Matrix
confusionMatrix(predict(model2, training_pc), training_pc$classe)
# Plot
results_rf  <-  data.frame(actual = training_pc$classe, predicted = predict(model2, training_pc))
ggplot(results_rf, aes(x = actual, y = predicted, color = actual)) + geom_jitter(size = 0.5, alpha = 0.5) + theme_bw() + theme(legend.position = "none")
#predict and generate the cases for evaluation
testing_predict   <-  predict(model2, testing_pc)
# change the working directory
setwd("/Users/Pankaj/pml_CourseProject/predictions/")
source("/Users/Pankaj/pml_CourseProject/pml_write_files.R")
pml_write_files(testing_predict)
ggplot(pc_dumbbell_new, aes(x = pc5_dumbbell, y = pc3_dumbbell, color = train_noNA$classe)) + geom_point() + coord_cartesian(ylim = c(0,10)) + coord_cartesian(xlim = c(-4,4), ylim = c(0,5)) + theme_bw() + theme(legend.position = "bottom") + guides(colour = guide_legend(title.position = "top",title.hjust = 0.5)) + scale_x_continuous("5th Dumbbell Principal Component") + scale_y_continuous("3rd Dumbbell Principal Component") + scale_color_discrete("Exercise Class")
p1  <-  ggplot(pc_belt_new, aes(x = pc1_belt, y = pc2_belt, color = train_noNA$classe)) + geom_point()
p2  <-  ggplot(pc_arm_new, aes(x = pc1_arm, y = pc2_arm, color = train_noNA$classe)) + geom_point()
p3  <-  ggplot(pc_dumbbell_new , aes(x = pc1_dumbbell, y = pc2_dumbbell, color = train_noNA$classe)) + geom_point() + coord_cartesian(ylim=c(0,10))
p4  <-  ggplot(pc_forearm_new, aes(x = pc1_forearm, y = pc2_forearm, color = train_noNA$classe)) + geom_point() + coord_cartesian(ylim=c(-5,5))
grid.arrange(p1, p2, p3, p4, nrow = 2, ncol = 2)
library(ggplot2)
p1  <-  ggplot(pc_belt_new, aes(x = pc1_belt, y = pc2_belt, color = train_noNA$classe)) + geom_point()
p2  <-  ggplot(pc_arm_new, aes(x = pc1_arm, y = pc2_arm, color = train_noNA$classe)) + geom_point()
p3  <-  ggplot(pc_dumbbell_new , aes(x = pc1_dumbbell, y = pc2_dumbbell, color = train_noNA$classe)) + geom_point() + coord_cartesian(ylim=c(0,10))
p4  <-  ggplot(pc_forearm_new, aes(x = pc1_forearm, y = pc2_forearm, color = train_noNA$classe)) + geom_point() + coord_cartesian(ylim=c(-5,5))
grid.arrange(p1, p2, p3, p4, nrow = 2, ncol = 2)
install.packages(gridExtra)
install.packages("gridExtra")
library(gridExtra)
p1  <-  ggplot(pc_belt_new, aes(x = pc1_belt, y = pc2_belt, color = train_noNA$classe)) + geom_point()
p2  <-  ggplot(pc_arm_new, aes(x = pc1_arm, y = pc2_arm, color = train_noNA$classe)) + geom_point()
p3  <-  ggplot(pc_dumbbell_new , aes(x = pc1_dumbbell, y = pc2_dumbbell, color = train_noNA$classe)) + geom_point() + coord_cartesian(ylim=c(0,10))
p4  <-  ggplot(pc_forearm_new, aes(x = pc1_forearm, y = pc2_forearm, color = train_noNA$classe)) + geom_point() + coord_cartesian(ylim=c(-5,5))
grid.arrange(p1, p2, p3, p4, nrow = 2, ncol = 2)
